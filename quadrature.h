#pragma once
// I'm only using one quadrature rule for now, one that's all-around good (15th order,
// positive weights), and with not too many points.
#include <array>
#include "openmc/position.h"

constexpr openmc::Position constpos(double x, double y, double z) {
  openmc::Position result;
  result.x = x;
  result.y = y;
  result.z = z;
  return result;
}

template<unsigned N>
struct Quadrature
{
  static constexpr unsigned Npts = N;
  static constexpr std::array<openmc::Position, N> points = constpos(0, 0, 0);
  static constexpr std::array<double, N> weights = 0;
};

struct RabinowitzRichter6 : Quadrature<48>
{
 static constexpr std::array<openmc::Position, Npts> points = {constpos(0.995769, 0.500000, 0.0),
    constpos(0.901008, 0.500000, 0.0),
    constpos(0.782434, 0.500000, 0.0),
    constpos(0.004231, 0.500000, 0.0),
    constpos(0.098992, 0.500000, 0.0),
    constpos(0.217566, 0.500000, 0.0),
    constpos(0.500000, 0.995769, 0.0),
    constpos(0.500000, 0.901008, 0.0),
    constpos(0.500000, 0.782434, 0.0),
    constpos(0.500000, 0.004231, 0.0),
    constpos(0.500000, 0.098992, 0.0),
    constpos(0.500000, 0.217566, 0.0),
    constpos(0.967720, 0.967720, 0.0),
    constpos(0.881228, 0.881228, 0.0),
    constpos(0.607808, 0.607808, 0.0),
    constpos(0.967720, 0.032280, 0.0),
    constpos(0.881228, 0.118772, 0.0),
    constpos(0.607808, 0.392192, 0.0),
    constpos(0.032280, 0.967720, 0.0),
    constpos(0.118772, 0.881228, 0.0),
    constpos(0.392192, 0.607808, 0.0),
    constpos(0.032280, 0.032280, 0.0),
    constpos(0.118772, 0.118772, 0.0),
    constpos(0.392192, 0.392192, 0.0),
    constpos(0.988483, 0.834224, 0.0),
    constpos(0.946856, 0.686760, 0.0),
    constpos(0.806124, 0.703949, 0.0),
    constpos(0.011517, 0.834224, 0.0),
    constpos(0.053144, 0.686760, 0.0),
    constpos(0.193876, 0.703949, 0.0),
    constpos(0.988483, 0.165776, 0.0),
    constpos(0.946856, 0.313240, 0.0),
    constpos(0.806124, 0.296051, 0.0),
    constpos(0.011517, 0.165776, 0.0),
    constpos(0.053144, 0.313240, 0.0),
    constpos(0.193876, 0.296051, 0.0),
    constpos(0.834224, 0.988483, 0.0),
    constpos(0.686760, 0.946856, 0.0),
    constpos(0.703949, 0.806124, 0.0),
    constpos(0.165776, 0.988483, 0.0),
    constpos(0.313240, 0.946856, 0.0),
    constpos(0.296051, 0.806124, 0.0),
    constpos(0.834224, 0.011517, 0.0),
    constpos(0.686760, 0.053144, 0.0),
    constpos(0.703949, 0.193876, 0.0),
    constpos(0.165776, 0.011517, 0.0),
    constpos(0.313240, 0.053144, 0.0),
    constpos(0.296051, 0.193876, 0.0),};
 static constexpr std::array<double, Npts> weights = {0.00753113019953025,
    0.0217786710052273,
    0.03125200735878735,
    0.00753113019953025,
    0.0217786710052273,
    0.03125200735878735,
    0.00753113019953025,
    0.0217786710052273,
    0.03125200735878735,
    0.00753113019953025,
    0.0217786710052273,
    0.03125200735878735,
    0.00669128519654165,
    0.023991296590610924,
    0.04377082495858438,
    0.00669128519654165,
    0.023991296590610924,
    0.04377082495858438,
    0.00669128519654165,
    0.023991296590610924,
    0.04377082495858438,
    0.00669128519654165,
    0.023991296590610924,
    0.04377082495858438,
    0.00707840930083185,
    0.021660367900627326,
    0.0287536151438999,
    0.00707840930083185,
    0.021660367900627326,
    0.0287536151438999,
    0.00707840930083185,
    0.021660367900627326,
    0.0287536151438999,
    0.00707840930083185,
    0.021660367900627326,
    0.0287536151438999,
    0.00707840930083185,
    0.021660367900627326,
    0.0287536151438999,
    0.00707840930083185,
    0.021660367900627326,
    0.0287536151438999,
    0.00707840930083185,
    0.021660367900627326,
    0.0287536151438999,
    0.00707840930083185,
    0.021660367900627326,
    0.0287536151438999};
};

